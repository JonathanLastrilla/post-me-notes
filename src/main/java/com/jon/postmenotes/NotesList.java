/*
 * 
 * 
 * 
 */
package com.jon.postmenotes;

import com.jon.postmenotes.core.ColorScheme;
import com.jon.postmenotes.core.Note;
import com.jon.postmenotes.core.NotesManager;
import java.awt.Dialog;
import java.awt.EventQueue;
import javax.swing.DefaultComboBoxModel;

/**
 *
 * @author jlastril
 */
public class NotesList extends javax.swing.JFrame {

    /**
     * Creates new form NotesList
     */
    public NotesList() {
        initComponents();
        setTitle(System.getProperty("user.name") + " - Notest List");
        setIconImage(Main.createImageIcon(Main.ICON_NAME, "").getImage());
        DefaultComboBoxModel notesCBModel = new DefaultComboBoxModel(
                manager.getSavedNotes()
                        .stream()
                        .filter(Note::isHidden)
                        .toArray());
        notesListJCB.setModel(notesCBModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        notesListJCB = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        restoreJB = new javax.swing.JButton();
        infoJL = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("PostItList");

        notesListJCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                notesListJCBActionPerformed(evt);
            }
        });

        restoreJB.setText("Restore");
        restoreJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restoreJBActionPerformed(evt);
            }
        });

        infoJL.setOpaque(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(infoJL, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(notesListJCB, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(restoreJB)))
                        .addGap(0, 2, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(notesListJCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(restoreJB))
                .addGap(11, 11, 11)
                .addComponent(infoJL, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 2, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void restoreJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restoreJBActionPerformed
        Note n = (Note) notesListJCB.getModel().getSelectedItem();
        n.setHidden(false);
        final PostMeNoteDialog dialog = new PostMeNoteDialog(n);
        EventQueue.invokeLater(() -> {
            dialog.setSizeExternal();
            dialog.setVisible(true);
        });
    }//GEN-LAST:event_restoreJBActionPerformed

    private void notesListJCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_notesListJCBActionPerformed
        Note n = (Note) notesListJCB.getModel().getSelectedItem();
        ColorScheme scheme = n.getColorScheme();
        StringBuilder b = new StringBuilder();
        b.append("<html>")
        .append("<b> Status:</b> ").append(scheme.getLabel()).append("</br>")
        .append("<b> Last Edited: </b> ").append(n.getTimeLastEdited().toString()).append("</br>")
        .append("</html>");
        infoJL.setBackground(scheme.getBg());
        infoJL.setForeground(scheme.getFg());
        infoJL.setText(b.toString());
    }//GEN-LAST:event_notesListJCBActionPerformed

    private final NotesManager manager = NotesManager.getInstance();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel infoJL;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JComboBox<String> notesListJCB;
    private javax.swing.JButton restoreJB;
    // End of variables declaration//GEN-END:variables
}
