/*
 * The MIT License
 *
 * Copyright 2022 jlastril.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package com.jon.postmenotes;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.format.DateTimeFormatter;
import java.time.format.FormatStyle;
import java.time.temporal.ChronoUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jlastril
 */
public class TaskProgress extends javax.swing.JDialog {

    static final DateTimeFormatter formatter
            = DateTimeFormatter.ISO_DATE
                    .ofLocalizedDate(FormatStyle.MEDIUM)
                    .withZone(ZoneId.from(ZoneOffset.UTC));
    
    private int daysSpan = 9;

    /**
     * Creates new form TaskProgress
     */
    public TaskProgress(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        String[] week = IntStream.range(0, daysSpan)
                .mapToObj(i -> {
                    return i == 0 ? "Task": formatter.format(ChronoUnit.DAYS.addTo(Instant.now(), i));
                })             
                .toArray(String[]::new);
        DefaultTableModel m = new DefaultTableModel(week, 0);
        jTable1.setModel(m);
        m.addRow(progressToObjectArray(new DummyProgress(), m));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 627, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TaskProgress.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TaskProgress.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TaskProgress.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TaskProgress.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                TaskProgress dialog = new TaskProgress(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
        String output = formatter.format(Instant.now());
        System.out.println(output);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    final Object[] progressToObjectArray(Progress progress, DefaultTableModel model) {
        return IntStream.range(0, model.getColumnCount())
                .mapToObj(i -> {
//                    LocalDate c = formatter.parse(model.getColumnName(i), LocalDate::from);
                    if(i == 0){
                        return progress.taskName();
                    }
                    SimpleDateFormat sdf = new SimpleDateFormat("MMM dd, yyyy");
                    try {
                        Instant column = sdf.parse(model.getColumnName(i)).toInstant();
                        if (column.compareTo(progress.getDateStart()) >= 0 && column.compareTo(progress.getDateEnd()) <= 0) {
                            return "true";
                        } else {
                            return "false";
                        }
                    } catch (ParseException ex) {
                        Logger.getLogger(TaskProgress.class.getName()).log(Level.SEVERE, null, ex);
                        return "err";
                    }

                })
                .collect(Collectors.toList())
                .toArray(String[]::new);

    }

    interface Progress {

        String taskName();

        int getProgress();

        Instant getDateStart();

        Instant getDateEnd();
    }

    class DummyProgress implements Progress {

        @Override
        public String taskName() {
            return "test1";
        }

        @Override
        public int getProgress() {
            return 1;
        }

        @Override
        public Instant getDateStart() {
            return ChronoUnit.DAYS.addTo(Instant.now(), 2);
        }

        @Override
        public Instant getDateEnd() {
            return ChronoUnit.DAYS.addTo(Instant.now(), 4);
        }

    }

}
